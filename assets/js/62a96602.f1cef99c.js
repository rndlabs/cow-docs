"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[4144],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=d(r),f=o,m=c["".concat(l,".").concat(f)]||c[f]||p[f]||a;return r?n.createElement(m,s(s({ref:t},u),{},{components:r})):n.createElement(m,s({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var d=2;d<a;d++)s[d]=r[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},7243:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var n=r(7462),o=(r(7294),r(3905));const a={},s="Creating the order",i={unversionedId:"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/creating-the-order",id:"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/creating-the-order",title:"Creating the order",description:"Let\u2019s do an intermediate step and create a method to submit the order. The gist of the process is the following:",source:"@site/docs/5_tutorials/cowswap-trades-with-a-gnosis-safe-wallet/3_creating-the-order.md",sourceDirName:"5_tutorials/cowswap-trades-with-a-gnosis-safe-wallet",slug:"/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/creating-the-order",permalink:"/cow-docs/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/creating-the-order",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5_tutorials/cowswap-trades-with-a-gnosis-safe-wallet/3_creating-the-order.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Approving the tokens to sell",permalink:"/cow-docs/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/approving-the-tokens-to-sell"},next:{title:"Running the TX from the safe",permalink:"/cow-docs/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/running-the-tx-from-the-safe"}},l={},d=[],u={toc:d},c="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"creating-the-order"},"Creating the order"),(0,o.kt)("p",null,"Let\u2019s do an intermediate step and create a method to submit the order. The gist of the process is the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Get the quote of the trade to do"),(0,o.kt)("li",{parentName:"ul"},"Create an order through the API and get an order id"),(0,o.kt)("li",{parentName:"ul"},"Use the order id to set a flag on-chain, saying you are ok with that trade")),(0,o.kt)("p",null,"I tried adding comments around the code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from time import time\nimport requests\nimport web3\ndef cowswap_sell(safe, sell_token, buy_token):\n    # Contract used to sign the order\n    gnosis_settlement = safe.contract("0x9008D19f58AAbD9eD0D60971565AA8510560ab41")\n    amount = sell_token.balanceOf(safe.address)\n\n    # get the protocol fee + the buy amount after protocol fee\n    fee_and_quote = "https://api.cow.fi/mainnet/api/v1/feeAndQuote/sell"\n    get_params = {\n        "sellToken": sell_token.address,\n        "buyToken": buy_token.address,\n        "sellAmountBeforeFee": amount\n    }\n    r = requests.get(fee_and_quote, params=get_params)\n    assert r.ok and r.status_code == 200\n\n    # These two values are needed to create an order\n    fee_amount = int(r.json()[\'fee\'][\'amount\'])\n    buy_amount_after_fee = int(r.json()[\'buyAmountAfterFee\'])\n    assert fee_amount > 0\n    assert buy_amount_after_fee > 0\n\n    # Pretty random order deadline :shrug:\n    deadline = chain.time() + 60*60*24*100 # 100 days\n\n    # Submit order\n    order_payload = {\n        "sellToken": sell_token.address,\n        "buyToken": buy_token.address,\n        "sellAmount": str(amount-fee_amount), # amount that we have minus the protocol fee we have to pay\n        "buyAmount": str(buy_amount_after_fee), # buy amount fetched from the previous call\n        "validTo": deadline,\n        "appData": web3.Web3.keccak(text="yearn goes moooooo").hex(), # required field, do not change :)\n        "feeAmount": str(fee_amount),\n        "kind": "sell",\n        "partiallyFillable": False,\n        "receiver": safe.address,\n        "signature": "0x",\n        "from": safe.address,\n        "sellTokenBalance": "erc20",\n        "buyTokenBalance": "erc20",\n        "signingScheme": "presign" # Very important. this tells the API you are going to sign on chain\n    }\n    orders_url = f"https://protocol-mainnet.gnosis.io/api/v1/orders"\n    r = requests.post(orders_url, json=order_payload)\n    assert r.ok and r.status_code == 201\n    order_uid = r.json()\n    print(f"Payload: {order_payload}")\n    print(f"Order uid: {order_uid}")\n\n    # With the order id, we set the flag, basically signing as the gnosis safe.\n    gnosis_settlement.setPreSignature(order_uid, True)\n')))}p.isMDXComponent=!0}}]);