"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[5561],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>g});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=p(r),m=o,g=l["".concat(c,".").concat(m)]||l[m]||u[m]||a;return r?n.createElement(g,i(i({ref:t},d),{},{components:r})):n.createElement(g,i({ref:t},d))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[l]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3963:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={},i="STEP 2: Sign the order",s={unversionedId:"cow-sdk/sign-and-post-orders/step-2-sign-the-order",id:"cow-sdk/sign-and-post-orders/step-2-sign-the-order",title:"STEP 2: Sign the order",description:"Once you know the price and protocol fee, we can create the order and sign it:",source:"@site/docs/6_cow-sdk/sign-and-post-orders/4_step-2-sign-the-order.md",sourceDirName:"6_cow-sdk/sign-and-post-orders",slug:"/cow-sdk/sign-and-post-orders/step-2-sign-the-order",permalink:"/cow-docs/docs/cow-sdk/sign-and-post-orders/step-2-sign-the-order",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/6_cow-sdk/sign-and-post-orders/4_step-2-sign-the-order.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"STEP 1: Get Market Price",permalink:"/cow-docs/docs/cow-sdk/sign-and-post-orders/step-1-get-market-price"},next:{title:"STEP 3: Post the signed order to the API",permalink:"/cow-docs/docs/cow-sdk/sign-and-post-orders/step-3-post-the-signed-order-to-the-api"}},c={},p=[],d={toc:p},l="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(l,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"step-2-sign-the-order"},"STEP 2: Sign the order"),(0,o.kt)("p",null,"Once you know the price and protocol fee, we can create the order and sign it:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Technically the order is just a signed message with your intent to trade, and contains your ",(0,o.kt)("inlineCode",{parentName:"li"},"Limit Price")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"Protocol Fee"),"."),(0,o.kt)("li",{parentName:"ul"},"As explained before, you can choose your ",(0,o.kt)("inlineCode",{parentName:"li"},"Limit Price"),", but some general approach is to take the current Market Price and apply some slippage tolerance to it. ",(0,o.kt)("inlineCode",{parentName:"li"},"Received Amount = Expected Amount * (1 - Slippage Tolerance)")),(0,o.kt)("li",{parentName:"ul"},"The SDK will provide an easy way to sign orders given the raw data")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { OrderSigningUtils, OrderKind, SupportedChainId } from \'@cowprotocol/cow-sdk\'\nimport { Web3Provider } from \'@ethersproject/providers\'\n\nconst provider = new Web3Provider(window.ethereum)\nconst signer = provider.getSigner()\n\nconst { sellToken, buyToken, validTo, buyAmount, sellAmount, receiver, feeAmount } = quoteResponse.quote\n\n// Prepare the RAW order\nconst order = {\n  kind: OrderKind.SELL, // SELL or BUY  \n  receiver, // Your account or any other\n  sellToken,\n  buyToken,\n\n  partiallyFillable: false, // "false" is for a "Fill or Kill" order, "true" for allowing "Partial execution" which is not supported yet\n  // Deadline\n  validTo,\n\n  // Limit Price\n  //    You can apply some slippage tolerance here to make sure the trade is executed. \n  //    CoW Protocol protects from MEV, so it can work with higher slippages\n  sellAmount,\n  buyAmount, \n\n  // Use the protocol fee you received from the API\n  feeAmount,\n\n  // The appData allows you to attach arbitrary information (metadata) to the order. Its explained in their own section. For now, you can use this 0x0 value\n  appData: \'0x0000000000000000000000000000000000000000000000000000000000000000\'\n}\n\n// Sign the order\nconst signedOrder = await OrderSigningUtils.signOrder(order, SupportedChainId.MAINNET, signer)\n')),(0,o.kt)("p",null,"At this point, you have a signed order. So next step will be to post it to the API so it's considered by the solvers and executed."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\ud83d\udcda Read more about ",(0,o.kt)("inlineCode",{parentName:"p"},"appData")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cowprotocol/app-data"},"here"))))}u.isMDXComponent=!0}}]);