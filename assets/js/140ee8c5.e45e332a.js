"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[2489],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(n),d=r,h=p["".concat(c,".").concat(d)]||p[d]||f[d]||o;return n?a.createElement(h,s(s({ref:t},u),{},{components:n})):a.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9130:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={},s="Running the TX from the safe",i={unversionedId:"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/running-the-tx-from-the-safe",id:"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/running-the-tx-from-the-safe",title:"Running the TX from the safe",description:"The last step is running a TX submission to the multisig using the previous method.",source:"@site/docs/5_tutorials/cowswap-trades-with-a-gnosis-safe-wallet/4_running-the-tx-from-the-safe.md",sourceDirName:"5_tutorials/cowswap-trades-with-a-gnosis-safe-wallet",slug:"/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/running-the-tx-from-the-safe",permalink:"/cow-docs/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/running-the-tx-from-the-safe",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5_tutorials/cowswap-trades-with-a-gnosis-safe-wallet/4_running-the-tx-from-the-safe.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Creating the order",permalink:"/cow-docs/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/creating-the-order"},next:{title:"Conclusion",permalink:"/cow-docs/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/conclusion"}},c={},l=[],u={toc:l},p="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"running-the-tx-from-the-safe"},"Running the TX from the safe"),(0,r.kt)("p",null,"The last step is running a TX submission to the multisig using the previous method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def run_trade_sep_21():\n    safe = ApeSafe("0xMySafeAddress")\n\n    yfi = safe.contract("0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e")\n    usdc = safe.contract("0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48")\n    link = safe.contract("0x514910771AF9Ca656af840dff83E8264EcF986CA")\n    gusd = safe.contract("0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd")\n\n    cowswap_sell(safe, yfi, gusd)\n    cowswap_sell(safe, usdc, gusd)\n    cowswap_sell(safe, link, gusd)\n\n    safe_tx = safe.multisend_from_receipts()\n    account = click.prompt("signer", type=click.Choice(accounts.load()))\n    safe_tx.sign(accounts.load(account).private_key)\n    safe.preview(safe_tx, events=False, call_trace=False)\n    safe.post_transaction(safe_tx)\n')),(0,r.kt)("p",null,"This run will not be the typical ",(0,r.kt)("inlineCode",{parentName:"p"},"ape-safe")," TX. When you run the code you are actually calling the API and creating an order. You can create as many orders as you want BUT they are not valid until you sign them. In our case, executing the TX in the multisig will do the trick."),(0,r.kt)("p",null,"Once the TX is signed, you can query the ",(0,r.kt)("inlineCode",{parentName:"p"},"/solvable_orders")," endpoint to see your trades available to solvers. You can check the output from ",(0,r.kt)("a",{parentName:"p",href:"https://api.cow.fi/mainnet/#/default/get_api_v1_solvable_orders"},"https://api.cow.fi/mainnet/#/default/get","_","api","_","v1","_","solvable","_","orders"),"."),(0,r.kt)("p",null,"After a few minutes I got two transfers, the first was ",(0,r.kt)("inlineCode",{parentName:"p"},"YFI")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"LINK")," converted to ",(0,r.kt)("inlineCode",{parentName:"p"},"GUSD")," and on the second one ",(0,r.kt)("inlineCode",{parentName:"p"},"USDC")," converted to ",(0,r.kt)("inlineCode",{parentName:"p"},"GUSD"),"."))}f.isMDXComponent=!0}}]);