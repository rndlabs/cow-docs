"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[2822],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>w});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),f=c(a),d=r,w=f["".concat(l,".").concat(d)]||f[d]||u[d]||o;return a?n.createElement(w,s(s({ref:t},p),{},{components:a})):n.createElement(w,s({ref:t},p))}));function w(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[f]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3697:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={},s="Approving the tokens to sell",i={unversionedId:"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/approving-the-tokens-to-sell",id:"tutorials/cowswap-trades-with-a-gnosis-safe-wallet/approving-the-tokens-to-sell",title:"Approving the tokens to sell",description:"The first step is approving the tokens you want to sell to the GPv2VaultRelayer.",source:"@site/docs/5_tutorials/cowswap-trades-with-a-gnosis-safe-wallet/2_approving-the-tokens-to-sell.md",sourceDirName:"5_tutorials/cowswap-trades-with-a-gnosis-safe-wallet",slug:"/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/approving-the-tokens-to-sell",permalink:"/cow-docs/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/approving-the-tokens-to-sell",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/5_tutorials/cowswap-trades-with-a-gnosis-safe-wallet/2_approving-the-tokens-to-sell.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CoW Protocol trades with a Gnosis Safe Wallet",permalink:"/cow-docs/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/introduction"},next:{title:"Creating the order",permalink:"/cow-docs/docs/tutorials/cowswap-trades-with-a-gnosis-safe-wallet/creating-the-order"}},l={},c=[],p={toc:c},f="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(f,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"approving-the-tokens-to-sell"},"Approving the tokens to sell"),(0,r.kt)("p",null,"The first step is approving the tokens you want to sell to the ",(0,r.kt)("strong",{parentName:"p"},"GPv2VaultRelayer"),"."),(0,r.kt)("p",null,"The safe that I am using had ",(0,r.kt)("inlineCode",{parentName:"p"},"yvUSDC"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"yvYFI")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"yvLINK"),", so my first TX takes care of withdrawing and approving each token. Code is the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import click\nfrom ape_safe import ApeSafe\nfrom brownie *\n\ndef withdraw_and_approve_tokens_sep_21():\n    # Get the safe\n    safe = ApeSafe("0xMySafeAddress")\n\n    # Contract we need to approve so our tokens can be transferFrom\n    gnosis_vault_relayer = safe.contract("0xC92E8bdf79f0507f65a392b0ab4667716BFE0110")\n\n    # yearn vault tokens\n    yvUSDC = safe.contract("0x5f18C75AbDAe578b483E5F43f12a39cF75b973a9")\n    yvYFI = safe.contract("0xE14d13d8B3b85aF791b2AADD661cDBd5E6097Db1")\n    yvLINK = safe.contract("0x671a912C10bba0CFA74Cfc2d6Fba9BA1ed9530B2")\n\n    for vault in [yvUSDC, yvYFI, yvLINK]:\n        print(f"Processing {vault.name()}")\n\n        # Withdraw everything from the vault\n        vault.withdraw()\n        token = safe.contract(vault.token())\n        token_balance = token.balanceOf(safe.address)\n        print(f"Balance of {token.name()}: {(token_balance / 10 ** token.decimals()):_}")\n        assert token.balanceOf(safe.address) > 0\n\n        # Approve so we can create a cowswap order\n        token.approve(gnosis_vault_relayer, 2**256-1)\n\n\n    safe_tx = safe.multisend_from_receipts()\n    account = click.prompt("signer", type=click.Choice(accounts.load()))\n    safe_tx.sign(accounts.load(account).private_key)\n    safe.preview(safe_tx, events=False, call_trace=False)\n    safe.post_transaction(safe_tx)\n')),(0,r.kt)("p",null,"After testing in a fork, ",(0,r.kt)("inlineCode",{parentName:"p"},"ape-safe")," will ask for your account password and submit the TX to the multisig."),(0,r.kt)("p",null,"After the TX is executed, we would have our vanilla ERC-20 tokens plus all approvals needed to submit an order."))}u.isMDXComponent=!0}}]);