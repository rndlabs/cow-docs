"use strict";(self.webpackChunkcow_docs=self.webpackChunkcow_docs||[]).push([[6582],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>f});var o=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=o.createContext({}),i=function(e){var t=o.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},s=function(e){var t=i(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,c=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=i(a),m=n,f=u["".concat(c,".").concat(m)]||u[m]||l[m]||r;return a?o.createElement(f,p(p({ref:t},s),{},{components:a})):o.createElement(f,p({ref:t},s))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,p=new Array(r);p[0]=m;var d={};for(var c in t)hasOwnProperty.call(t,c)&&(d[c]=t[c]);d.originalType=e,d[u]="string"==typeof e?e:n,p[1]=d;for(var i=2;i<r;i++)p[i]=a[i];return o.createElement.apply(null,p)}return o.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1272:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>l,frontMatter:()=>r,metadata:()=>d,toc:()=>i});var o=a(7462),n=(a(7294),a(3905));const r={},p="Upload document to IPFS",d={unversionedId:"cow-sdk/order-meta-data-appdata/upload-document-to-ipfs",id:"cow-sdk/order-meta-data-appdata/upload-document-to-ipfs",title:"Upload document to IPFS",description:"The SDK uses Pinata to upload it to IPFS, so you will need an API Key in order to upload it using the SDK.",source:"@site/docs/6_cow-sdk/order-meta-data-appdata/5_upload-document-to-ipfs.md",sourceDirName:"6_cow-sdk/order-meta-data-appdata",slug:"/cow-sdk/order-meta-data-appdata/upload-document-to-ipfs",permalink:"/cow-docs/docs/cow-sdk/order-meta-data-appdata/upload-document-to-ipfs",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/6_cow-sdk/order-meta-data-appdata/5_upload-document-to-ipfs.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Download a document given the AppData",permalink:"/cow-docs/docs/cow-sdk/order-meta-data-appdata/download-a-document-given-the-appdata"},next:{title:"BONUS: CIDv0 and AppData",permalink:"/cow-docs/docs/cow-sdk/order-meta-data-appdata/bonus-cidv0-and-appdata"}},c={},i=[],s={toc:i},u="wrapper";function l(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,o.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"upload-document-to-ipfs"},"Upload document to IPFS"),(0,n.kt)("p",null,"The SDK uses Pinata to upload it to IPFS, so you will need an API Key in order to upload it using the SDK."),(0,n.kt)("p",null,"Alternatively, you can upload the document on your own using any other service."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"import { MetadataApi } from '@cowprotocol/app-data'\n\nexport const metadataApi = new MetadataApi()\n\nconst IPFS_OPTIONS = {\n    pinataApiKey: `PINATA_API_KEY`,\n    pinataApiSecret: `PINATA_SECRET_API_KEY`,\n}\n\nconst appDataDoc = await metadataApi.generateAppDataDoc(...)\n\n// Make sure you provide the IPFS params when instantiating the SDK\nconst uploadedAppDataHash = await metadataApi.uploadMetadataDocToIpfs(appDataDoc, IPFS_OPTIONS)\n\nconsole.log(uploadedAppDataHash)\n")))}l.isMDXComponent=!0}}]);